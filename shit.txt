
Logo

About

Getting started

Manual

Contributing

Community

Class reference

    All classes

Globals
Nodes

Node
AcceptDialog
AnimatableBody2D
AnimatableBody3D
AnimatedSprite2D

    Description
    Tutorials
    Properties
    Methods
    Signals
    Property Descriptions
    Method Descriptions

AnimatedSprite3D
AnimationMixer
AnimationPlayer
AnimationTree
Area2D
Area3D
AspectRatioContainer
AudioListener2D
AudioListener3D
AudioStreamPlayer
AudioStreamPlayer2D
AudioStreamPlayer3D
BackBufferCopy
BaseButton
Bone2D
BoneAttachment3D
BoxContainer
Button
Camera2D
Camera3D
CanvasGroup
CanvasItem
CanvasLayer
CanvasModulate
CenterContainer
CharacterBody2D
CharacterBody3D
CheckBox
CheckButton
CodeEdit
CollisionObject2D
CollisionObject3D
CollisionPolygon2D
CollisionPolygon3D
CollisionShape2D
CollisionShape3D
ColorPicker
ColorPickerButton
ColorRect
ConeTwistJoint3D
ConfirmationDialog
Container
Control
CPUParticles2D
CPUParticles3D
CSGBox3D
CSGCombiner3D
CSGCylinder3D
CSGMesh3D
CSGPolygon3D
CSGPrimitive3D
CSGShape3D
CSGSphere3D
CSGTorus3D
DampedSpringJoint2D
Decal
DirectionalLight2D
DirectionalLight3D
EditorCommandPalette
EditorFileDialog
EditorFileSystem
EditorInspector
EditorPlugin
EditorProperty
EditorResourcePicker
EditorResourcePreview
EditorScriptPicker
EditorSpinSlider
FileDialog
FileSystemDock
FlowContainer
FogVolume
Generic6DOFJoint3D
GeometryInstance3D
GPUParticles2D
GPUParticles3D
GPUParticlesAttractor3D
GPUParticlesAttractorBox3D
GPUParticlesAttractorSphere3D
GPUParticlesAttractorVectorField3D
GPUParticlesCollision3D
GPUParticlesCollisionBox3D
GPUParticlesCollisionHeightField3D
GPUParticlesCollisionSDF3D
GPUParticlesCollisionSphere3D
GraphEdit
GraphElement
GraphFrame
GraphNode
GridContainer
GridMap
GrooveJoint2D
HBoxContainer
HFlowContainer
HingeJoint3D
HScrollBar
HSeparator
HSlider
HSplitContainer
HTTPRequest
ImporterMeshInstance3D
InstancePlaceholder
ItemList
Joint2D
Joint3D
Label
Label3D
Light2D
Light3D
LightmapGI
LightmapProbe
LightOccluder2D
Line2D
LineEdit
LinkButton
MarginContainer
Marker2D
Marker3D
MenuBar
MenuButton
MeshInstance2D
MeshInstance3D
MissingNode
MultiMeshInstance2D
MultiMeshInstance3D
MultiplayerSpawner
MultiplayerSynchronizer
NavigationAgent2D
NavigationAgent3D
NavigationLink2D
NavigationLink3D
NavigationObstacle2D
NavigationObstacle3D
NavigationRegion2D
NavigationRegion3D
NinePatchRect
Node2D
Node3D
OccluderInstance3D
OmniLight3D
OpenXRCompositionLayer
OpenXRCompositionLayerCylinder
OpenXRCompositionLayerEquirect
OpenXRCompositionLayerQuad
OpenXRHand
OptionButton
Panel
PanelContainer
Parallax2D
ParallaxBackground
ParallaxLayer
Path2D
Path3D
PathFollow2D
PathFollow3D
PhysicalBone2D
PhysicalBone3D
PhysicalBoneSimulator3D
PhysicsBody2D
PhysicsBody3D
PinJoint2D
PinJoint3D
PointLight2D
Polygon2D
Popup
PopupMenu
PopupPanel
ProgressBar
Range
RayCast2D
RayCast3D
ReferenceRect
ReflectionProbe
RemoteTransform2D
RemoteTransform3D
ResourcePreloader
RichTextLabel
RigidBody2D
RigidBody3D
RootMotionView
ScriptCreateDialog
ScriptEditor
ScriptEditorBase
ScrollBar
ScrollContainer
Separator
ShaderGlobalsOverride
ShapeCast2D
ShapeCast3D
Skeleton2D
Skeleton3D
SkeletonIK3D
SkeletonModifier3D
Slider
SliderJoint3D
SoftBody3D
SpinBox
SplitContainer
SpotLight3D
SpringArm3D
Sprite2D
Sprite3D
SpriteBase3D
StaticBody2D
StaticBody3D
StatusIndicator
SubViewport
SubViewportContainer
TabBar
TabContainer
TextEdit
TextureButton
TextureProgressBar
TextureRect
TileMap
TileMapLayer
Timer
TouchScreenButton
Tree
VBoxContainer
VehicleBody3D
VehicleWheel3D
VFlowContainer
VideoStreamPlayer
Viewport
VisibleOnScreenEnabler2D
VisibleOnScreenEnabler3D
VisibleOnScreenNotifier2D
VisibleOnScreenNotifier3D
VisualInstance3D
VoxelGI
VScrollBar
VSeparator
VSlider
VSplitContainer
Window
WorldEnvironment
XRAnchor3D
XRBodyModifier3D
XRCamera3D
XRController3D
XRFaceModifier3D
XRHandModifier3D
XRNode3D

    XROrigin3D

Resources
Other objects
Editor-only

    Variant types

    Godot Engine 4.3 documentation in English
        All classes AnimatedSprite2D 

Up to date

This page is up to date for Godot 4.3. If you still find outdated information, please open an issue.
AnimatedSprite2D

Inherits: Node2D < CanvasItem < Node < Object

Sprite node that contains multiple textures as frames to play for animation.
Description

AnimatedSprite2D is similar to the Sprite2D node, except it carries multiple textures as animation frames. Animations are created using a SpriteFrames resource, which allows you to import image files (or a folder containing said files) to provide the animation frames for the sprite. The SpriteFrames resource can be configured in the editor via the SpriteFrames bottom panel.
Tutorials

    2D Sprite animation

    2D Dodge The Creeps Demo

Properties

StringName
	

animation
	

&"default"

String
	

autoplay
	

""

bool
	

centered
	

true

bool
	

flip_h
	

false

bool
	

flip_v
	

false

int
	

frame
	

0

float
	

frame_progress
	

0.0

Vector2
	

offset
	

Vector2(0, 0)

float
	

speed_scale
	

1.0

SpriteFrames
	

sprite_frames
	
Methods

float
	

get_playing_speed() const

bool
	

is_playing() const

void
	

pause()

void
	

play(name: StringName = &"", custom_speed: float = 1.0, from_end: bool = false)

void
	

play_backwards(name: StringName = &"")

void
	

set_frame_and_progress(frame: int, progress: float)

void
	

stop()
Signals

animation_changed()

Emitted when animation changes.

animation_finished()

Emitted when the animation reaches the end, or the start if it is played in reverse. When the animation finishes, it pauses the playback.

Note: This signal is not emitted if an animation is looping.

animation_looped()

Emitted when the animation loops.

frame_changed()

Emitted when frame changes.

sprite_frames_changed()

Emitted when sprite_frames changes.
Property Descriptions

StringName animation = &"default"

    void set_animation(value: StringName)

    StringName get_animation()

The current animation from the sprite_frames resource. If this value is changed, the frame counter and the frame_progress are reset.

String autoplay = ""

    void set_autoplay(value: String)

    String get_autoplay()

The key of the animation to play when the scene loads.

bool centered = true

    void set_centered(value: bool)

    bool is_centered()

If true, texture will be centered.

Note: For games with a pixel art aesthetic, textures may appear deformed when centered. This is caused by their position being between pixels. To prevent this, set this property to false, or consider enabling ProjectSettings.rendering/2d/snap/snap_2d_vertices_to_pixel and ProjectSettings.rendering/2d/snap/snap_2d_transforms_to_pixel.

bool flip_h = false

    void set_flip_h(value: bool)

    bool is_flipped_h()

If true, texture is flipped horizontally.

bool flip_v = false

    void set_flip_v(value: bool)

    bool is_flipped_v()

If true, texture is flipped vertically.

int frame = 0

    void set_frame(value: int)

    int get_frame()

The displayed animation frame's index. Setting this property also resets frame_progress. If this is not desired, use set_frame_and_progress.

float frame_progress = 0.0

    void set_frame_progress(value: float)

    float get_frame_progress()

The progress value between 0.0 and 1.0 until the current frame transitions to the next frame. If the animation is playing backwards, the value transitions from 1.0 to 0.0.

Vector2 offset = Vector2(0, 0)

    void set_offset(value: Vector2)

    Vector2 get_offset()

The texture's drawing offset.

float speed_scale = 1.0

    void set_speed_scale(value: float)

    float get_speed_scale()

The speed scaling ratio. For example, if this value is 1, then the animation plays at normal speed. If it's 0.5, then it plays at half speed. If it's 2, then it plays at double speed.

If set to a negative value, the animation is played in reverse. If set to 0, the animation will not advance.

SpriteFrames sprite_frames

    void set_sprite_frames(value: SpriteFrames)

    SpriteFrames get_sprite_frames()

The SpriteFrames resource containing the animation(s). Allows you the option to load, edit, clear, make unique and save the states of the SpriteFrames resource.
Method Descriptions

float get_playing_speed() const

Returns the actual playing speed of current animation or 0 if not playing. This speed is the speed_scale property multiplied by custom_speed argument specified when calling the play method.

Returns a negative value if the current animation is playing backwards.

bool is_playing() const

Returns true if an animation is currently playing (even if speed_scale and/or custom_speed are 0).

void pause()

Pauses the currently playing animation. The frame and frame_progress will be kept and calling play or play_backwards without arguments will resume the animation from the current playback position.

See also stop.

void play(name: StringName = &"", custom_speed: float = 1.0, from_end: bool = false)

Plays the animation with key name. If custom_speed is negative and from_end is true, the animation will play backwards (which is equivalent to calling play_backwards).

If this method is called with that same animation name, or with no name parameter, the assigned animation will resume playing if it was paused.

void play_backwards(name: StringName = &"")

Plays the animation with key name in reverse.

This method is a shorthand for play with custom_speed = -1.0 and from_end = true, so see its description for more information.

void set_frame_and_progress(frame: int, progress: float)

The setter of frame resets the frame_progress to 0.0 implicitly, but this method avoids that.

This is useful when you want to carry over the current frame_progress to another frame.

Example:

# Change the animation with keeping the frame index and progress.
var current_frame = animated_sprite.get_frame()
var current_progress = animated_sprite.get_frame_progress()
animated_sprite.play("walk_another_skin")
animated_sprite.set_frame_and_progress(current_frame, current_progress)

void stop()

Stops the currently playing animation. The animation position is reset to 0 and the custom_speed is reset to 1.0. See also pause.
User-contributed notes

Please read the User-contributed notes policy before submitting a comment.

© Copyright 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0).
Built with Sphinx using a theme provided by Read the Docs.
